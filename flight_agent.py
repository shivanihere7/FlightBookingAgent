# -*- coding: utf-8 -*-
"""flight_agent

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18fx_wLDzcSZHc-zxL63DsJtHu39jE-2P
"""

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Dict, Optional


# ------------------------
# Agent Class
# ------------------------
class FlightBookingAgent:
    def __init__(self):
        # Store bookings in memory (for demo)
        self.bookings: Dict[int, dict] = {}
        self.counter = 1  # For booking IDs

    def create_booking(self, passengers: List[str], origin: str, destination: str, date: str) -> dict:
        booking_id = self.counter
        self.counter += 1

        # Fake best flight logic (in real case, query a DB or API)
        best_flight = self.find_best_flight(origin, destination, date)

        booking = {
            "id": booking_id,
            "passengers": passengers,
            "passenger_count": len(passengers),
            "origin": origin,
            "destination": destination,
            "date": date,
            "status": "Confirmed",
            "best_flight": best_flight
        }
        self.bookings[booking_id] = booking
        return booking

    def get_booking(self, booking_id: int) -> Optional[dict]:
        return self.bookings.get(booking_id)

    def list_bookings(self) -> List[dict]:
        return list(self.bookings.values())

    def find_best_flight(self, origin: str, destination: str, date: str) -> dict:
        # Simulated "best flight" logic
        # In real life, this could query airline APIs, databases, etc.
        return {
            "flight_number": "AI-202",
            "airline": "Air India",
            "origin": origin,
            "destination": destination,
            "date": date,
            "departure_time": "10:30 AM",
            "arrival_time": "01:15 PM",
            "price": "â‚¹5,500"
        }


# ------------------------
# API Setup
# ------------------------
app = FastAPI(title="Flight Booking Agent API")
agent = FlightBookingAgent()


# ------------------------
# Request / Response Models
# ------------------------
class BookingRequest(BaseModel):
    passengers: List[str]   # multiple passengers
    origin: str
    destination: str
    date: str  # yyyy-mm-dd


class FlightInfo(BaseModel):
    flight_number: str
    airline: str
    origin: str
    destination: str
    date: str
    departure_time: str
    arrival_time: str
    price: str


class BookingResponse(BaseModel):
    id: int
    passengers: List[str]
    passenger_count: int
    origin: str
    destination: str
    date: str
    status: str
    best_flight: FlightInfo


# ------------------------
# API Endpoints
# ------------------------
@app.post("/book-flight", response_model=BookingResponse)
def book_flight(request: BookingRequest):
    """Create a new flight booking with multiple passengers"""
    booking = agent.create_booking(
        passengers=request.passengers,
        origin=request.origin,
        destination=request.destination,
        date=request.date
    )
    return booking


@app.get("/booking/{booking_id}", response_model=BookingResponse)
def get_booking(booking_id: int):
    """Get details of a specific booking"""
    booking = agent.get_booking(booking_id)
    if not booking:
        raise HTTPException(status_code=404, detail="Booking not found")
    return booking


@app.get("/bookings", response_model=List[BookingResponse])
def list_all_bookings():
    """List all flight bookings"""
    return agent.list_bookings()